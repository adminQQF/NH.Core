@{
    Layout = "/Views/Shared/_Layout.cshtml";
}

<link href="~/lib/zTree/css/bootstrapStyle/bootstrapStyle.css" rel="stylesheet" />
<link href="~/css/font-awesome.min93e3.css" rel="stylesheet" />
<script src="~/lib/zTree/js/jquery.ztree.core.js"></script>
<script src="~/lib/zTree/js/jquery.ztree.excheck.js"></script>
<script src="~/lib/zTree/js/jquery.ztree.exhide.js"></script>
<script src="~/lib/zTree/js/jquery.ztree.all.js"></script>



<body layadmin-themealias="default" style="height:100%">
    <div class="layui-fluid layui-col-xs2">
        <div class="layui-card">
            <div class="layui-form layui-card-header layuiadmin-card-header-auto">
                <h2>字典分类</h2>
            </div>
            <div class="layui-form layui-card-header layuiadmin-card-header-auto"  style="height:650px">
                <ul id="tree" class="ztree"></ul>
            </div>
        </div>
    </div>
    <div class="layui-fluid layui-col-xs10" style="padding-left:0px">
        <div class="layui-card">
            <div class="layui-form layui-card-header layuiadmin-card-header-auto">
                <h2>字典列表</h2>
            </div>
            <div class="layui-form layui-card-header layuiadmin-card-header-auto" style="height:650px">
                <div class="layui-card-body">
                    <div style="padding-bottom: 10px;">
                        <button id="add" class="layui-btn layuiadmin-btn-useradmin" data-type="add">添加</button>
                    </div>
                    <table class="layui-hide" id="tableList" lay-filter="tableList"></table>
                </div>
            </div>
        </div>


</body>


<script type="text/javascript">
    var setting = {
        view: {
            addHoverDom: addHoverDom,
            removeHoverDom: removeHoverDom,
            selectedMulti: false
        },
        edit: {
            enable: true,

            //给节点额外增加属性来控制“重命名”、“删除”图标的显示或隐藏

            showRenameBtn: showRenameBtn,
            showRemoveBtn: showRemoveBtn
        },
        data: {
            simpleData: {
                enable: true
            }
        },
        callback: {
            beforeDrag: beforeDrag,
            beforeEditName: beforeEditName,
            beforeRemove: beforeRemove,
            beforeRename: beforeRename,
            onRemove: onRemove,
            onRename: onRename,
            beforeClick: beforeClick
        }
    };


    var zNodes;
    var log, className = "dark";
    var treeNodeEdit;
    var checkNode;
    function beforeDrag(treeId, treeNodes) {
        return false;
    }
    //选中事件
    function beforeClick(treeId, treeNode) {
        if (treeNode.id != "0") {
            checkNode = treeNode;
            layui.table.reload('tableList', {
                page: {
                    curr: 1 //重新从第 1 页开始
                }
                , where: {
                    Tid: checkNode.id
                }
            });
        } else {
            checkNode = null;
        }
    }

    function beforeEditName(treeId, treeNode) {
        className = (className === "dark" ? "" : "dark");
        showLog("[ " + getTime() + " beforeEditName ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name);
        var zTree = $.fn.zTree.getZTreeObj("tree");
        zTree.selectNode(treeNode);
        treeNodeEdit = treeNode;
        var url = "?Id=" + treeNode.id;
        layui.use('layer', function () {
            var layer = layui.layer;
            layer.open({
                type: 2,
                area: ['600px', '400px'],
                fixed: false, //不固定
                maxmin: true,
                title: '编辑',
                content: '/sys/dicttype/edit' + url,
                btn: ['确定', '取消'],
                yes: function (index, layero) {
                    $("#form").length;//直接获取表单长度=0
                    $(layero).find("#form").length;//表单长度还是等于0
                    var submit = layero.find('iframe').contents().find("#layuiadmin-app-form-edit");
                    submit.click();
                }
            });
        });
        return false;
    }


    //回调,修改节点
    function editNode(data) {
        var zTree = $.fn.zTree.getZTreeObj("tree");
        treeNodeEdit.name = data.name;
        treeNodeEdit.noEditBtn = data.noEditBtn;
        treeNodeEdit.noRemoveBtn = data.noRemoveBtn;
        zTree.updateNode(treeNodeEdit);
    }

    function beforeRemove(treeId, treeNode, isDel) {
        zTree.selectNode(treeNode);
        layui.use('layer', function () {
            var layer = layui.layer;
            layer.confirm('确认要删除吗？', {
                btn: ['确定', '取消']
            }, function (index) {
                layer.close(index);
                $.ajax({
                    url: '/sys/dicttype/del',
                    type: 'post',
                    async: false,//使用同步的方式,true为异步方式
                    data: { Id: treeNode.id },//这里使用json对象
                    success: function (data) {
                        if (data.code == 200) {
                            zTree.removeNode(treeNode);
                            layui.table.reload('tableList'); //重载表格
                        }
                    }
                });
            }, function (index) {

            });
        });
        return false;
    }
    function onRemove(e, treeId, treeNode) {
        showLog("[ " + getTime() + " onRemove ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name);
    }
    function beforeRename(treeId, treeNode, newName) {
        className = (className === "dark" ? "" : "dark");
        showLog("[ " + getTime() + " beforeRename ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name);
        if (newName.length == 0) {
            alert("节点名称不能为空.");
            var zTree = $.fn.zTree.getZTreeObj("tree");
            setTimeout(function () { zTree.editName(treeNode) }, 10);
            return false;
        }
        return true;
    }
    function onRename(e, treeId, treeNode) {
        showLog("[ " + getTime() + " onRename ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name);
    }
    function showLog(str) {
        if (!log) log = $("#log");
        log.append("<li class='" + className + "'>" + str + "</li>");
        if (log.children("li").length > 8) {
            log.get(0).removeChild(log.children("li")[0]);
        }
    }
    function getTime() {
        var now = new Date(),
            h = now.getHours(),
            m = now.getMinutes(),
            s = now.getSeconds(),
            ms = now.getMilliseconds();
        return (h + ":" + m + ":" + s + " " + ms);
    }


    //是否显示编辑按钮
    function showRenameBtn(treeId, treeNode) {
        //获取节点所配置的noEditBtn属性值
        if (treeNode.noEditBtn != undefined && treeNode.noEditBtn) {
            return false;
        } else {
            return true;
        }
    }
    //是否显示删除按钮
    function showRemoveBtn(treeId, treeNode) {
        //获取节点所配置的noRemoveBtn属性值
        if (treeNode.noRemoveBtn != undefined && treeNode.noRemoveBtn) {
            return false;
        } else {
            return true;
        }
    }
    var newCount = 1;
    var treeNodeAdd; //用来记录当前添加的节点对象
    function addHoverDom(treeId, treeNode) {

        if (treeNode.level > 0) {
            return false;
        } else {
            //给节点添加"新增"按钮
            var sObj = $("#" + treeNode.tId + "_span");
            if (treeNode.editNameFlag || $("#addBtn_" + treeNode.id).length > 0) return;
            var addStr = "<span class='button add' id='addBtn_" + treeNode.id
                + "' title='add node' onfocus='this.blur();'></span>";
            sObj.after(addStr);
            var btn = $("#addBtn_" + treeNode.id);
            if (btn) btn.bind("click", function () {

                treeNodeAdd = treeNode;
                var url = "?Id=" + treeNode.id + "&Name=" + treeNode.name;
                layui.use('layer', function () {
                    var layer = layui.layer;
                    layer.open({
                        type: 2,
                        area: ['600px', '400px'],
                        fixed: false, //不固定
                        maxmin: true,
                        content: '/sys/dicttype/create' + url,
                        title: '添加',
                        btn: ['确定', '取消'],
                        yes: function (index, layero) {
                            $("#form").length;//直接获取表单长度=0
                            $(layero).find("#form").length;//表单长度还是等于0
                            var submit = layero.find('iframe').contents().find("#layuiadmin-app-form-submit");
                            submit.click();
                        }
                    });
                });

                return false;
            });
        }

    };

    //回调,添加节点
    function addNode(data) {
        var zTree = $.fn.zTree.getZTreeObj("tree");
        zTree.addNodes(treeNodeAdd, { id: data.id, pId: treeNodeAdd.id, name: data.name, noEditBtn: data.noEditBtn, noRemoveBtn: data.noRemoveBtn });
    }

    function removeHoverDom(treeId, treeNode) {
        $("#addBtn_" + treeNode.id).unbind().remove();
    };
    function selectAll() {
        var zTree = $.fn.zTree.getZTreeObj("tree");
        zTree.setting.edit.editNameSelectAll = $("#selectAll").attr("checked");
    }

    $(document).ready(function () {
        $.ajax({
            url: '/sys/dicttype/listtree',
            type: 'post',
            async: false,//使用同步的方式,true为异步方式
            data: {},//这里使用json对象
            success: function (data) {
                zNodes = data.data;
            }
        });
        zTree = $.fn.zTree.init($("#tree"), setting, zNodes);
        layui.use('layer', function () {
            layer = layui.layer;
        });

        $.fn.zTree.init($("#tree"), setting, zNodes);
        $("#selectAll").bind("click", selectAll);
    });
</script>





<script>
    layui.use('form', function () {
        var form = layui.form;
        //监听开关
        form.on('switch(status)', function (data) {
            var status = 0;
            if (data.elem.checked) {
                status = 1;
            }
            var id = $(this).attr("tag");
            var url = "/sys/dict/editStatus";

            var field = { Id: id, Status: status };
            $.post(url, field, function (data) {
                if (data.code == 200) {
                    layui.table.reload('tableList'); //重载表格
                    layer.msg("操作成功!", {
                        time: 1000,
                        icon: 1,
                    });
                } else {
                    layer.msg("操作失败!", {
                        time: 1000,
                        icon: 2,
                    });

                }
            })

        });
    });
    layui.use('table', function () {
        var table = layui.table;
        table.render({
            elem: '#tableList',
            height: '550px'
            , url: '/sys/dict/list'

            , request: {
                pageName: 'pageIndex' //页码的参数名称，默认：page
                , limitName: 'pageSize' //每页数据量的参数名，默认：limit
            }
            , response: {
                statusName: 'status' //规定数据状态的字段名称，默认：code
                , statusCode: 0 //规定成功的状态码，默认：0
                , msgName: 'msg' //规定状态信息的字段名称，默认：msg
                , countName: 'total' //规定数据总数的字段名称，默认：count
                , dataName: 'data' //规定数据列表的字段名称，默认：data
            }
            , method: 'post'
            , title: '用户数据表'
            , cellMinWidth: 80 //全局定义常规单元格的最小宽度，layui 2.2.1 新增
            , cols: [[
                { title: '名称', width: 200, field: 'Name' }
                , { width: 200, title: '字典类型', templet: '#TName' }
                , { field: 'Sort', width: 80, title: '排序' }
                , { field: 'Status', width: 180, title: '状态', templet: '#Status' }
                , { field: 'Description', minWidth: 400, title: '描述' }
                , { fixed: 'right',templet: '#Operating', minWidth: 210, align: 'center', title: '操作' }
            ]]
            , id: 'tableList'
            , limit: 20
            , limits: [20, 30, 40, 50, 60, 80, 100]
            , page: true
        });
        //var $ = layui.$, active = {
        //    reload: function () {
        //        var username = $('#username');
        //        var email = $('#email');
        //        var sex = $('#sex');
        //        //执行重载
        //        table.reload('testReload', {
        //            page: {
        //                curr: 1 //重新从第 1 页开始
        //            }
        //            , where: {
        //                key: {
        //                    UserName: username.val(),
        //                    Email: email.val(),
        //                    Sex: sex.val()
        //                }
        //            }
        //        });
        //    }
        //};
        //自定义事件
        $('#add').on('click', function () {
            if (checkNode == null) {
                layer.msg('请选中一个字典类型', { icon: 5 });
                return;
            }
            layer.open({
                type: 2,
                area: ['600px', '450px'],
                fixed: false, //不固定
                maxmin: true,
                content: '/sys/dict/create?Tid=' + checkNode.id,
                btn: ['确定', '取消'],
                yes: function (index, layero) {
                    $("#form").length;//直接获取表单长度=0
                    $(layero).find("#form").length;//表单长度还是等于0
                    var submit = layero.find('iframe').contents().find("#layuiadmin-app-form-submit");
                    submit.click();

                }

            });
        })

        //监听表格排序问题
        table.on('sort(tableList)', function (obj) { //注：tool是工具条事件名，tableList是table原始容器的属性 lay-filter="对应的值"
            console.log(obj.field); //当前排序的字段名
            console.log(obj.type); //当前排序类型：desc（降序）、asc（升序）、null（空对象，默认排序）
            console.log(this); //当前排序的 th 对象

            //尽管我们的 table 自带排序功能，但并没有请求服务端。
            //有些时候，你可能需要根据当前排序的字段，重新向服务端发送请求，从而实现服务端排序，如：
            table.reload('tableList', { //testTable是表格容器id
                initSort: obj //记录初始排序，如果不设的话，将无法标记表头的排序状态。 layui 2.1.1 新增参数
                , where: { //请求参数（注意：这里面的参数可任意定义，并非下面固定的格式）
                    sortKey: obj.field //排序字段
                    , sortType: obj.type == "desc" ? 1 : 0 //排序方式
                }
            });
        });

        //头工具栏事件
        table.on('toolbar(tableList)', function (obj) {
            var checkStatus = table.checkStatus(obj.config.id);
            switch (obj.event) {
                case 'getCheckData':
                    var data = checkStatus.data;
                    layer.alert(JSON.stringify(data));
                    break;
                case 'getCheckLength':
                    var data = checkStatus.data;
                    layer.msg('选中了：' + data.length + ' 个');
                    break;
                case 'isAll':
                    layer.msg(checkStatus.isAll ? '全选' : '未全选');
                    break;
            };
        });

        //监听行工具事件
        table.on('tool(tableList)', function (obj) {
            var data = obj.data;
            //console.log(obj)
            if (obj.event === 'del') {
                layer.confirm('确定删除么?', function (index) {
                    var url = "/sys/dict/del";

                    var field = { Id: data.Id };
                    $.post(url, field, function (data) {
                        if (data.code == 200) {
                            layui.table.reload('tableList'); //重载表格
                            layer.msg("操作成功!", {
                                time: 1000,
                                icon: 1,
                            });
                        } else {
                            layer.msg("操作失败!", {
                                time: 1000,
                                icon: 2,
                            });

                        }
                    })
                });
            } else if (obj.event === 'edit') {
                var url = "?Id=" + data.Id;
                layui.use('layer', function () {
                    var layer = layui.layer;
                    layer.open({
                        type: 2,
                        area: ['600px', '450px'],
                        fixed: false, //不固定
                        maxmin: true,
                        content: '/sys/dict/edit' + url,
                        title: '编辑',
                        btn: ['确定', '取消'],
                        yes: function (index, layero) {
                            $("#form").length;//直接获取表单长度=0
                            $(layero).find("#form").length;//表单长度还是等于0
                            var submit = layero.find('iframe').contents().find("#layuiadmin-app-form-edit");
                            submit.click();
                        }
                    });
                });
            }
        });

    });
</script>



<script type="text/html" id="TName">
    <span>{{checkNode.name}}</span>
</script>


<script type="text/html" id="Status">
    <input type="checkbox" id="Status" name="Status" lay-skin="switch" lay-text="启用|关闭" title="是否启用" tag="{{d.Id}}" lay-filter="status" value="{{d.Status}}" {{# if(d.Status === 1){}} checked="" {{# } }}>
</script>


<script type="text/html" id="Operating">
    @*<a class="layui-btn layui-btn-normal layui-btn-xs" lay-event="detail"><i class="layui-icon layui-icon-read"></i>查看</a>*@
    <a class="layui-btn layui-btn-xs" lay-event="edit"><i class="layui-icon"></i>编辑</a>
    <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del"><i class="layui-icon"></i>删除</a>

</script>